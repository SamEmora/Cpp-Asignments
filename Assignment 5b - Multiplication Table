// Samuel Morales
// 10/18/23
// This program creates a Multiplication table

#include <iostream>
#include <iomanip> // Allows the use of setw

using namespace std;

int main()
{

int rows,columns; // Variables used to hold the users input 

// These lines ask the user for rows and columns and stores them in the respected variables
cout << "Multiplication Table Tool \n";
cout << "How many rows would you like? ";
cin >> rows;
cout <<"How many columns would you like? ";
cin >>columns;

cout << setw(4) << " "; // This line uses setw to set 4 spaces in between columns 
for (int col = 1; col <= columns; col++) //  Adds a column until its not less than or equal to the users input
{
    cout << setw(4) << col; // Creates a column with 4 spaces in between each other making it look neat
}
cout << endl;

for (int col = 1; col <= columns * 4 + 4; col++) // The number of dashes(-) printed is determined by this loop
    {
        cout << "-"; // This loops everytime for each column given
    }
cout << endl;

for (int ro = 1; ro <= rows; ro++) // Adds a row until its not less than or equal to the users input
{
    cout << setw(2) << ro << " |"; // This prints two spaces in between the numbers on the right and | for each row
    for (int col = 1; col <= columns; col++) // Adds a column until it reaches the given input
    {
        int result = ro * col; // This makes the variable result to hold the numbers when multiplied by the users given row and column
        cout << setw(4) << result; // This prints each result within a 4 characters of each other
        
    }
    cout << endl;
}

    return 0;
}

// Example Output:
// Multiplication Table Tool 
// How many rows would you like? 12
// How many columns would you like? 10
//        1   2   3   4   5   6   7   8   9  10
// --------------------------------------------
//  1 |   1   2   3   4   5   6   7   8   9  10
//  2 |   2   4   6   8  10  12  14  16  18  20
//  3 |   3   6   9  12  15  18  21  24  27  30
//  4 |   4   8  12  16  20  24  28  32  36  40
//  5 |   5  10  15  20  25  30  35  40  45  50
//  6 |   6  12  18  24  30  36  42  48  54  60
//  7 |   7  14  21  28  35  42  49  56  63  70
//  8 |   8  16  24  32  40  48  56  64  72  80
//  9 |   9  18  27  36  45  54  63  72  81  90
// 10 |  10  20  30  40  50  60  70  80  90 100
// 11 |  11  22  33  44  55  66  77  88  99 110
// 12 |  12  24  36  48  60  72  84  96 108 120
